# -*- coding: utf-8 -*-
#
#   TOPPERS/SSP Kernel
#       Toyohashi Open Platform for Embedded Real-Time Systems/
#       Advanced Standard Profile Kernel
# 
#   Copyright (C) 2017 by Meika Sugimoto
#
# 
#   上記著作権者は，以下の(1)〜(4)の条件を満たす場合に限り，本ソフトウェ
#   ア（本ソフトウェアを改変したものを含む．以下同じ）を使用・複製・改
#   変・再配布（以下，利用と呼ぶ）することを無償で許諾する．
#   (1) 本ソフトウェアをソースコードの形で利用する場合には，上記の著作
#       権表示，この利用条件および下記の無保証規定が，そのままの形でソー
#       スコード中に含まれていること．
#   (2) 本ソフトウェアを，ライブラリ形式など，他のソフトウェア開発に使
#       用できる形で再配布する場合には，再配布に伴うドキュメント（利用
#       者マニュアルなど）に，上記の著作権表示，この利用条件および下記
#       の無保証規定を掲載すること．
#   (3) 本ソフトウェアを，機器に組み込むなど，他のソフトウェア開発に使
#       用できない形で再配布する場合には，次のいずれかの条件を満たすこ
#       と．
#     (a) 再配布に伴うドキュメント（利用者マニュアルなど）に，上記の著
#         作権表示，この利用条件および下記の無保証規定を掲載すること．
#     (b) 再配布の形態を，別に定める方法によって，TOPPERSプロジェクトに
#         報告すること．
#   (4) 本ソフトウェアの利用により直接的または間接的に生じるいかなる損
#       害からも，上記著作権者およびTOPPERSプロジェクトを免責すること．
#       また，本ソフトウェアのユーザまたはエンドユーザからのいかなる理
#       由に基づく請求からも，上記著作権者およびTOPPERSプロジェクトを
#       免責すること．
# 
#   本ソフトウェアは，無保証で提供されているものである．上記著作権者お
#   よびTOPPERSプロジェクトは，本ソフトウェアに関して，特定の使用目的
#   に対する適合性も含めて，いかなる保証も行わない．また，本ソフトウェ
#   アの利用により直接的または間接的に生じたいかなる損害に関しても，そ
#   の責任を負わない．
# 
# 

#
#		パス2の生成スクリプトのチップ依存部（RL78/G13用）
#

#
#  有効な割込み番号，割込みハンドラ番号
#
$INTNO_VALID = Array(0..$TMAX_INTNO)
$INHNO_VALID = $INTNO_VALID

#
#  有効なCPU例外ハンドラ番号
#
$EXCNO_VALID = [ ]

#
#  ATT_ISRで使用できる割込み番号とそれに対応する割込みハンドラ番号
#
$INTNO_ATTISR_VALID = $INTNO_VALID
$INHNO_ATTISR_VALID = $INHNO_VALID

#
#  DEF_INT/DEF_EXCで使用できる割込みハンドラ番号／CPU例外ハンドラ番号
#
$INHNO_DEFINH_VALID = $INHNO_VALID
$EXCNO_DEFEXC_VALID = $EXCNO_VALID

#
#  チェック方法の指定
#
$CHECK_STKSZ_ALIGN = 1

#
#  CFG_INTで使用できる割込み番号と割込み優先度
#
$INTNO_CFGINT_VALID = $INTNO_VALID
$INTPRI_CFGINT_VALID = [ -1 , -2 , -3 ]

#
#  割込み属性中のターゲット依存に用いるビット
#
$TARGET_INTATR = $TA_POSEDGE | $TA_NEGEDGE


IncludeTrb("prc_kernel.trb")

#
#  TARGET_INTATRで指定した割込み属性が適切に設定されているかのチェック
#
#  これらの属性は特定の割込み番号にしか適用できない
#

$INTNO_EDGEATR_VALID = [ 2, 3, 4, 5, 6, 7, 35, 36, 37, 38, 39, 40 ]
# 

$cfgData[:CFG_INT].each.with_index do |(key, params), index|
  if ((params[:intatr].val & $TARGET_INTATR) != 0) && !$INTNO_EDGEATR_VALID.include?(params[:intno].val)
    error_ercd("E_PAR", params, \
     "inhno #{params[:intno]}(atr=#{params[:intatr]}) can not use with attribute TA_POSEDGE and TA_NEGEDGE")
  end
end

#
#  _kernel_bitpat_cfgintの生成
#

if ($TMAX_INTNO & 0x0f) == 0
  bitpat_cfgint_num = ($TMAX_INTNO >> 5)
else
  bitpat_cfgint_num = ($TMAX_INTNO >> 5) + 1
end

$kernelCfgC.add("const uint32_t _kernel_bitpat_cfgint[#{bitpat_cfgint_num}] = {")

(0..(bitpat_cfgint_num-1)).each do |num|
  bitpat_cfgint = 0
  ((num*32)..(num*32+31)).each do |inhno|
    if $cfgData[:DEF_INH].has_key?(inhno)
      bitpat_cfgint = bitpat_cfgint | (1 << (inhno & 0x01f))
    end
  end
  $kernelCfgC.add("\tUINT32_C(0x#{sprintf("%08x", bitpat_cfgint)}),")
end

$kernelCfgC.add2("};")

#
#  kernel_cfg_support.asmの先頭部分の生成
#
$kernelCfgAsm = GenFile.new("kernel_cfg_support.asm")
$kernelCfgAsm.add(<<EOS)
;
;  kernel_cfg_support.asm
;
;  kernel_cfg.cのアセンブラ記述部
;

	.EXTERN _start
	.PUBLIC vector_table

;
;  Vector Table
;

	.SECTION .vect , CONSTF
vector_table:
	.DB2 LOWW( _start )		; Reset Vector
	.DB2 0x00				; Empty
EOS


#
#  割込みベクタテーブル
#

$INTNO_VALID.each do |inhno|
  if ($cfgData[:DEF_INH].has_key?(inhno)) && ($cfgData[:CFG_INT][inhno][:intpri] < $TIPM_LOCK)
    $kernelCfgAsm.append("\t.DB2 LOWW( _kernel_inthdr_entry_#{inhno} )")
    $kernelCfgAsm.add("\t; #{inhno}")
  else
    $kernelCfgAsm.append("\t.DB2 LOWW( __kernel_unused_interrupt )")
    $kernelCfgAsm.add("\t; #{inhno}")
 end
end

$kernelCfgAsm = GenFile.new("kernel_cfg_support.asm")
$kernelCfgAsm.add(<<EOS)

;
;  割込み入り口エントリ
;

	.section .text, TEXT

	.EXTERN __kernel_interrupt
EOS

#
#  割込み入り口エントリの生成
#
$cfgData[:DEF_INH].each.with_index do |(key, params), index|
	$kernelCfgAsm.add("\t.PUBLIC _kernel_inthdr_entry_#{params[:inhno].val}");
	$kernelCfgAsm.add("\t.EXTERN _#{params[:inthdr]}");
	$kernelCfgAsm.add("_kernel_inthdr_entry_#{params[:inhno].val}:");
	$kernelCfgAsm.add("\tPUSH AX")
	$kernelCfgAsm.add("\tPUSH BC")
	$kernelCfgAsm.add("\tPUSH DE")
	$kernelCfgAsm.add("\tPUSH HL")
	$kernelCfgAsm.add("\tMOV A, ES")
	$kernelCfgAsm.add("\tPUSH AX")
	$kernelCfgAsm.add("\tMOV A, CS")
	$kernelCfgAsm.add("\tPUSH AX")
	$kernelCfgAsm.add("\tMOV CS, #HIGHW(_#{params[:inthdr]})")
	$kernelCfgAsm.add("\tMOVW HL, #LOWW(_#{params[:inthdr]})")
	$kernelCfgAsm.add("\tMOVW BC, ##{params[:inhno].val}")
	$kernelCfgAsm.add("\tBR !!__kernel_interrupt")
	$kernelCfgAsm.add("")
end

