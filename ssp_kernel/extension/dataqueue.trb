# -*- coding: utf-8 -*-
#
#   TOPPERS/SSP Kernel
#       Toyohashi Open Platform for Embedded Real-Time Systems/
#       Advanced Standard Profile Kernel
# 
#   Copyright (C) 2015 by FUJI SOFT INCORPORATED, JAPAN
#   Copyright (C) 2015,2016 by Embedded and Real-Time Systems Laboratory
#               Graduate School of Information Science, Nagoya Univ., JAPAN
#   Copyright (C) 2017 by Naoki Saito
#              Nagoya Municipal Industrial Research Institute, JAPAN
# 
#   上記著作権者は，以下の(1)〜(4)の条件を満たす場合に限り，本ソフトウェ
#   ア（本ソフトウェアを改変したものを含む．以下同じ）を使用・複製・改
#   変・再配布（以下，利用と呼ぶ）することを無償で許諾する．
#   (1) 本ソフトウェアをソースコードの形で利用する場合には，上記の著作
#       権表示，この利用条件および下記の無保証規定が，そのままの形でソー
#       スコード中に含まれていること．
#   (2) 本ソフトウェアを，ライブラリ形式など，他のソフトウェア開発に使
#       用できる形で再配布する場合には，再配布に伴うドキュメント（利用
#       者マニュアルなど）に，上記の著作権表示，この利用条件および下記
#       の無保証規定を掲載すること．
#   (3) 本ソフトウェアを，機器に組み込むなど，他のソフトウェア開発に使
#       用できない形で再配布する場合には，次のいずれかの条件を満たすこ
#       と．
#     (a) 再配布に伴うドキュメント（利用者マニュアルなど）に，上記の著
#         作権表示，この利用条件および下記の無保証規定を掲載すること．
#     (b) 再配布の形態を，別に定める方法によって，TOPPERSプロジェクトに
#         報告すること．
#   (4) 本ソフトウェアの利用により直接的または間接的に生じるいかなる損
#       害からも，上記著作権者およびTOPPERSプロジェクトを免責すること．
#       また，本ソフトウェアのユーザまたはエンドユーザからのいかなる理
#       由に基づく請求からも，上記著作権者およびTOPPERSプロジェクトを
#       免責すること．
# 
#   本ソフトウェアは，無保証で提供されているものである．上記著作権者お
#   よびTOPPERSプロジェクトは，本ソフトウェアに関して，特定の使用目的
#   に対する適合性も含めて，いかなる保証も行わない．また，本ソフトウェ
#   アの利用により直接的または間接的に生じたいかなる損害に関しても，そ
#   の責任を負わない．
# 
#   $Id: dataqueue.trb 668 2016-03-03 13:57:53Z ertl-hiro $
# 

#
#		データキュー機能の生成スクリプト
#

class DataqueueObject < KernelObject
  def initialize()
    super("dtq", "dataqueue")
  end

  def prepare()
    $cfgData[@api].sort.each do |key, params|
      # dtqatrが無効の場合（E_RSATR）
      #（TA_NULL以外の場合）
      if params[:dtqatr] != $TA_NULL
        error_illegal_id("E_RSATR", params, :dtqatr, :dtqid)
      end

      # dtqmbがNULLでない場合（E_NOSPT）
      if params[:dtqmb] != "NULL"
        error_illegal_id("E_NOSPT", params, :dtqmb, :dtqid)
      end

      # データキューサイズdtqcntが0の場合(E_PAR)
      if params[:dtqcnt] == 0
        error_illegal_id("E_PAR", params, :dtqcnt, :dtqid)
      end
    end
  end

  def generateData()
    if $cfgData[:CRE_DTQ].size() > 0
      # 事前準備（エラーチェック，メモリ領域の生成）
      prepare()

      # データキュー領域
      $cfgData[@api].each.with_index do |id, index|
        $kernelCfgC.add("static intptr_t _kernel_dtqmb_#{id[1][:dtqid].str}[#{id[1][:dtqcnt]}];")
      end

      #
      # データキュー初期化ブロック
      #

      # データキュー属性(dtqatr)
      $kernelCfgC.append("const ATR\t_kernel_dtqinib_atr[TNUM_DTQID] = {")
      $cfgData[@api].each.with_index do |id, index|
        dtqatr = id[1][:dtqatr]
        $kernelCfgC.append(",") if index > 0
        $kernelCfgC.append("(#{dtqatr.str})")
      end
      $kernelCfgC.add("};")

      # データキューサイズ(dtqcnt)
      $kernelCfgC.append("const uint8_t\t_kernel_dtqinib_size[TNUM_DTQID] = {")
      $cfgData[@api].each.with_index do |id, index|
        $kernelCfgC.append(",") if index > 0 
        $kernelCfgC.append("(#{id[1][:dtqcnt].str})")
      end 
      $kernelCfgC.add("};")

      # データキュー管理領域(data)
      $kernelCfgC.append("intptr_t * const\t_kernel_dtqinib_data[TNUM_DTQID] = {")
      $cfgData[@api].each.with_index do |id, index|
        $kernelCfgC.append(",") if index > 0
        $kernelCfgC.append("(_kernel_dtqmb_#{id[1][:dtqid].str})")
      end
      $kernelCfgC.add2("};")

      #
      #  データキューコントロールブロック
      #
      $kernelCfgC.add(<<EOS)
uint8_t _kernel_dtqcb_count[TNUM_DTQID];
uint8_t _kernel_dtqcb_head[TNUM_DTQID];
uint8_t _kernel_dtqcb_tail[TNUM_DTQID];
EOS

    else
      # オブジェクトが1つもない場合
      $kernelCfgC.add("TOPPERS_EMPTY_LABEL(const ATR, _kernel_dtqinib_atr);") 
      $kernelCfgC.add("TOPPERS_EMPTY_LABEL(intptr_t * const, _kernel_dtqinib_data);") 
      $kernelCfgC.add("TOPPERS_EMPTY_LABEL(const uint8_t, _kernel_dtqinib_size);") 
      $kernelCfgC.add("TOPPERS_EMPTY_LABEL(uint8_t, _kernel_dtqcb_count);") 
      $kernelCfgC.add("TOPPERS_EMPTY_LABEL(uint8_t, _kernel_dtqcb_head);") 
      $kernelCfgC.add2("TOPPERS_EMPTY_LABEL(uint8_t, _kernel_dtqcb_tail);") 
    end
  end
end

#
#  データキューに関する情報の生成
#
$kernelCfgC.comment_header("Dataqueue Functions")
DataqueueObject.new.generate()
